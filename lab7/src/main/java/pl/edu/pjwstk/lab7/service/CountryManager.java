package pl.edu.pjwstk.lab7.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import pl.edu.pjwstk.lab7.domain.Country;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

public class CountryManager {

	private Connection connection;

	//private final static String URL = "jdbc:mysql://localhost:3306/tau";
	private String URL = "jdbc:hsqldb:hsql://localhost/tau";
	private final static String USER = "root";
	private final static String PASSWORD = "";
	private final static String DRIVER = "com.mysql.jdbc.Driver";

	private String CREATE_TABLE_COUNTRY = "CREATE TABLE country( `id` INT NOT NULL AUTO_INCREMENT, " +
			"`country` VARCHAR(35) NOT NULL," +
			"`city` VARCHAR(35) NOT NULL, " +
			"`postal_code` VARCHAR(10) NOT NULL, PRIMARY KEY(`id`)) ENGINE = InnoDB";

//	private String CREATE_TABLE_COUNTRY =
//			"CREATE TABLE Country(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
//					"country varchar(30), city varchar(30), postal_code varchar(30),)";
//
	private PreparedStatement addCountryStmt; // INSERT
	private PreparedStatement getCountryStmt; // SELECT
	private PreparedStatement updateCountryStmt; // UPDATE
	private PreparedStatement deleteCountryStmt; // DELETE
	private PreparedStatement getAllCountryStmt; // SELECT ALL
	private PreparedStatement deleteAllCountryStmt; // DELETE ALL

	private Statement statement;

	public CountryManager() throws SQLException {
		try {
			connection = DriverManager.getConnection(URL, USER, PASSWORD);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, "%",
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Country".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_COUNTRY);

			addCountryStmt = connection
					.prepareStatement("INSERT INTO `country` (`id`, `country`, `city`, `postal_code`) VALUES (?, ?, ?, ?)");
			getCountryStmt = connection
					.prepareStatement("SELECT * FROM `country` WHERE `id` = ?");
			updateCountryStmt = connection
					.prepareStatement("UPDATE `country` SET `country` = ?, `city` = ?, `postal_code` = ? WHERE id = ?");
			deleteCountryStmt = connection
					.prepareStatement("DELETE FROM `country` WHERE `id` = ?");
			getAllCountryStmt = connection
					.prepareStatement("SELECT * FROM `country`");
			deleteAllCountryStmt = connection
					.prepareStatement("DELETE FROM `country`");

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	Connection getConnection() {
		return connection;
	}

	//ADD
	public int addCountry(Country country) {
		int count = 0;
		try {
			addCountryStmt.setInt(1, (int) country.getId());
			addCountryStmt.setString(2, country.getCountry());
			addCountryStmt.setString(3, country.getCity());
			addCountryStmt.setString(4, country.getPostal_code());

			count = addCountryStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	//GET
	public Country getCountry(int id) {
		Country c = new Country();
		try {
			getCountryStmt.setInt(1, id);
			ResultSet rs = getCountryStmt.executeQuery();

			while (rs.next()) {
				c.setId(rs.getInt("id"));
				c.setCountry(rs.getString("country"));
				c.setCity(rs.getString("city"));
				c.setPostal_code(rs.getString("postal_code"));
				//break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return c;
	}

	//UPDATE
	public int updateCountry(Country country) {
		int count = 0;
		try {
			updateCountryStmt.setString(1, country.getCountry());
			updateCountryStmt.setString(2, country.getCity());
			updateCountryStmt.setString(3, country.getPostal_code());
			updateCountryStmt.setInt(4, (int) country.getId());
			count = updateCountryStmt.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	//DETETE
	public int deleteCountry(int id) {
		int count = 0;
		try {
			deleteCountryStmt.setInt(1, id);
			count = deleteCountryStmt.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	//GET ALL
	public List<Country> getAllCountries() {
		List<Country> countries = new ArrayList<Country>();

		try {
			ResultSet rs = getAllCountryStmt.executeQuery();

			while (rs.next()) {
				Country c = new Country();
				c.setId(rs.getInt("id"));
				c.setCountry(rs.getString("country"));
				c.setCity(rs.getString("city"));
				c.setPostal_code(rs.getString("postal_code"));
				countries.add(c);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return countries;
	}

	//DELETE ALL
	public void clearCountries() {
		try {
			deleteAllCountryStmt.executeUpdate();
			//connection.prepareStatement("DELETE FROM `country`").executeUpdate(); // INNY SPOSOB
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
